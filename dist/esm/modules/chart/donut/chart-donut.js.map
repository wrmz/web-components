{"version":3,"file":"chart-donut.js","sources":["../../../../../src/modules/chart/donut/chart-donut.js"],"sourcesContent":["// import { registerComponents  } from '../../common/register-components';\n\n/**\n * @injectHTML\n */\nexport class ChartDonut extends HTMLElement {\n    static get observedAttributes() {\n        return [\n            'colors',\n            'values',\n            'labels',\n        ];\n    }\n\n    static degreesToRadians(angle) {\n        return angle * (Math.PI / 180);\n    }\n\n    constructor() {\n        super();\n        this.gap = 2;\n        this.cx = 80;\n        this.cy = 80;\n        this.radius = 60;\n        this.angleOffset = -90;\n        this.chartData = [];\n        this.segmentElems = [];\n        this.isLoaded = false;\n\n        this.svg = this.shadowRoot.querySelector('svg');\n        this.generateSegment = this.generateSegment.bind(this);\n        this.updateSegment = this.updateSegment.bind(this);\n    }\n\n    get currencyFormat() {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        }).format;\n    }\n\n    set colors(v) {\n        this.setAttribute('colors', JSON.stringify(v));\n    }\n\n    get colors() {\n        const colors = (this.getAttribute('colors') || '').replace(/'/g, '\"');\n        return colors ? JSON.parse(colors) : ['red', 'green', 'blue'];\n    }\n\n    set labels(v) {\n        this.setAttribute('labels', JSON.stringify(v));\n    }\n\n    get labels() {\n        const labels = (this.getAttribute('labels') || '').replace(/'/g, '\"');\n        return labels ? JSON.parse(labels) : [];\n    }\n\n    set values(v) {\n        this.setAttribute('values', JSON.stringify(v));\n    }\n\n    get values() {\n        const values = (this.getAttribute('values') || '').replace(/'/g, '\"');\n        return values ? JSON.parse(values) : [];\n    }\n\n    get total() {\n        return this.values.length\n            ? this.values.reduce((previous, current) => previous + current)\n            : 0;\n    }\n\n    get circumference() {\n        return 2 * Math.PI * this.radius;\n    }\n\n    get adjustedCircumference() {\n        return this.circumference - this.gap;\n    }\n\n    /**\n     * Loops through the values and generates a segment for each\n     */\n    generateSegments() {\n        this.values.forEach(this.generateSegment);\n    }\n\n    /**\n     * Generates an individual segment\n     * @param {number} val - The amount this segmenet represents\n     * @param {number} i - Index of this value in `this.values`\n     */\n    generateSegment(val, i) {\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        const title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        const data = {\n            degrees: this.angleOffset,\n        };\n\n        this.angleOffset += this.dataPercentage(this.values[i]) * 360;\n        this.chartData.push(data);\n\n        circle.setAttribute('tabindex', '0');\n        circle.setAttribute('cx', this.cx);\n        circle.setAttribute('cy', this.cy);\n        circle.setAttribute('r', this.radius);\n        circle.setAttribute('fill', 'transparent');\n        circle.setAttribute('stroke', this.colors[i]);\n        circle.setAttribute('stroke-width', 30);\n        circle.setAttribute('stroke-dasharray', this.adjustedCircumference);\n        circle.setAttribute('stroke-dashoffset', this.calculateStrokeDashOffset(this.values[i]));\n        circle.setAttribute('transform', this.calculateTransform(i));\n        circle.appendChild(title);\n        title.textContent = `${this.labels[i]}: ${this.currencyFormat(val)}`;\n\n        this.segmentElems.push(circle);\n        this.svg.appendChild(circle);\n    }\n\n    updateSegments() {\n        this.angleOffset = -90;\n        this.chartData = [];\n        this.values.forEach(this.updateSegment);\n    }\n\n    updateSegment(val, i) {\n        const circle = this.segmentElems[i];\n        const title = circle.querySelector('title');\n        const data = {\n            degrees: this.angleOffset,\n        };\n\n        this.angleOffset += this.dataPercentage(this.values[i]) * 360;\n        this.chartData.push(data);\n\n        title.textContent = `${this.labels[i]}: ${this.currencyFormat(val)}`;\n        circle.setAttribute('stroke-dasharray', this.adjustedCircumference);\n        circle.setAttribute('stroke-dashoffset', this.calculateStrokeDashOffset(this.values[i]));\n        circle.setAttribute('transform', this.calculateTransform(i));\n    }\n\n    calculateStrokeDashOffset(val) {\n        const strokeDiff = this.dataPercentage(val) * this.circumference;\n        return this.circumference - strokeDiff;\n    }\n\n    /**\n     * Calculates the transform rotation the circle should be\n     * attributed with\n     * @param {Number} i - The index of chart data to use\n     * @returns {String} - The rotation of the circle\n     */\n    calculateTransform(i) {\n        return `rotate(${this.chartData[i].degrees}, ${this.cx}, ${this.cy})`;\n    }\n\n    /**\n     * Gets the percentage a given value represents of the total\n     * @param {Number} val - The divisor\n     * @returns {Number} - The percentage\n     */\n    dataPercentage(val) {\n        return (this.total && val) ? val / this.total : 0;\n    }\n\n    /**\n     * Destroys the segments of the circle by removing the elements,\n     * removing them from the `segmentElems` array and removing their\n     * data from the `segmentElems` array.\n     */\n    destroySegments() {\n        while (this.svg.firstChild) {\n            this.svg.removeChild(this.svg.firstChild);\n            this.segmentElems.shift();\n            this.chartData.shift();\n        }\n        this.angleOffset = -90;\n    }\n\n    connectedCallback() {\n        this.generateSegments();\n        this.isLoaded = true;\n    }\n\n    /**\n     * @param {string} attr - The attribute which changed\n     * @param {string} oldVal - The old value\n     * @param {string} newVal - The new value\n     */\n    attributeChangedCallback() {\n        if (this.isLoaded && this.colors && this.values && this.total) {\n            this.updateSegments();\n        }\n    }\n}\n\nif (!window.customElements.get('chart-donut')) {\n    window.customElements.define('chart-donut', ChartDonut);\n}\n"],"names":["ChartDonut","HTMLElement","observedAttributes","static","angle","Math","PI","constructor","super","this","attachShadow","mode","template","document","createElement","innerHTML","shadowRoot","appendChild","content","cloneNode","gap","cx","cy","radius","angleOffset","chartData","segmentElems","isLoaded","svg","querySelector","generateSegment","bind","updateSegment","currencyFormat","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","colors","v","setAttribute","JSON","stringify","getAttribute","replace","parse","labels","values","total","length","reduce","previous","current","circumference","adjustedCircumference","generateSegments","forEach","val","i","circle","createElementNS","title","data","degrees","dataPercentage","push","calculateStrokeDashOffset","calculateTransform","textContent","updateSegments","strokeDiff","destroySegments","firstChild","removeChild","shift","connectedCallback","attributeChangedCallback","window","customElements","get","define"],"mappings":"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"}