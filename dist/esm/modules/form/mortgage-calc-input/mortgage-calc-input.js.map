{"version":3,"file":"mortgage-calc-input.js","sources":["../../../../../src/modules/form/mortgage-calc-input/mortgage-calc-input.js"],"sourcesContent":["import { FieldInput } from '../field-input/field-input';\n\nexport class MortgageCalcInput extends FieldInput {\n    static sanitize(v) { return (v + '').trim().replace(/[^0-9.]*/g, ''); }\n\n    get type() { return this.getAttribute('type') || 'currency'; }\n    get name() { return this.getAttribute('name') || ''; }\n    get stylizedFormat() {\n        return new Intl.NumberFormat('en-US', {\n            minimumFractionDigits: this.type === 'percentage' ? 1 : 0,\n            maximumFractionDigits: 3\n        }).format;\n    }\n    get currencyFormat() {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        }).format;\n    }\n    get numeric() {\n        const sanitized = MortgageCalcInput.sanitize(this.value);\n        const numeric = (!sanitized || isNaN(sanitized)) ? 0 : sanitized;\n        return Number.isInteger(numeric) ? parseInt(numeric, 10) : parseFloat(numeric);\n    }\n    get stylized() {\n        const stylized = this.stylizedFormat(this.numeric);\n        return this.type === 'percentage' ? stylized + '%' : stylized;\n    }\n    get currency() {\n        const sanitized = this.numeric;\n        return this.currencyFormat(sanitized);\n    }\n\n    handleKeyup(e) {\n        const val = e.target.value;\n        this.value = val === '.' ? val.replace('.', '0.') : val;\n        if (this.type === 'currency') {\n            e.target.value = this.currency;\n        } else if (this.type === 'percentage') {\n            e.target.value = this.stylized;\n        }\n    }\n\n    attributeChangedCallback(attr) {\n        this.handleChanged();\n        if (attr === 'value') {\n            if (this.type === 'currency') {\n                this._value = this.currency;\n            } else if (this.type === 'percentage') {\n                this._value = this.stylized;\n            }\n        }\n    }\n}\n\nif (!window.customElements.get('mortgage-calc-input')) {\n    window.customElements.define('mortgage-calc-input', MortgageCalcInput);\n}\n"],"names":["MortgageCalcInput","FieldInput","static","v","trim","replace","type","this","getAttribute","name","stylizedFormat","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","currencyFormat","style","currency","numeric","sanitized","sanitize","value","isNaN","Number","isInteger","parseInt","parseFloat","stylized","handleKeyup","e","val","target","attributeChangedCallback","attr","handleChanged","_value","window","customElements","get","define"],"mappings":"2DAEO,MAAMA,0BAA0BC,EACnCC,gBAAgBC,GAAK,OAAQA,EAAI,IAAIC,OAAOC,QAAQ,YAAa,GAAM,CAEnEC,WAAS,OAAOC,KAAKC,aAAa,SAAW,UAAa,CAC1DC,WAAS,OAAOF,KAAKC,aAAa,SAAW,EAAK,CAClDE,qBACA,OAAO,IAAIC,KAAKC,aAAa,QAAS,CAClCC,sBAAqC,eAAdN,KAAKD,KAAwB,EAAI,EACxDQ,sBAAuB,IACxBC,MACN,CACGC,qBACA,OAAO,IAAIL,KAAKC,aAAa,QAAS,CAClCK,MAAO,WACPC,SAAU,MACVL,sBAAuB,EACvBC,sBAAuB,IACxBC,MACN,CACGI,cACA,MAAMC,EAAYpB,kBAAkBqB,SAASd,KAAKe,OAC5CH,GAAYC,GAAaG,MAAMH,GAAc,EAAIA,EACvD,OAAOI,OAAOC,UAAUN,GAAWO,SAASP,EAAS,IAAMQ,WAAWR,EACzE,CACGS,eACA,MAAMA,EAAWrB,KAAKG,eAAeH,KAAKY,SAC1C,MAAqB,eAAdZ,KAAKD,KAAwBsB,EAAW,IAAMA,CACxD,CACGV,eACA,MAAME,EAAYb,KAAKY,QACvB,OAAOZ,KAAKS,eAAeI,EAC9B,CAEDS,YAAYC,GACR,MAAMC,EAAMD,EAAEE,OAAOV,MACrBf,KAAKe,MAAgB,MAARS,EAAcA,EAAI1B,QAAQ,IAAK,MAAQ0B,EAClC,aAAdxB,KAAKD,KACLwB,EAAEE,OAAOV,MAAQf,KAAKW,SACD,eAAdX,KAAKD,OACZwB,EAAEE,OAAOV,MAAQf,KAAKqB,SAE7B,CAEDK,yBAAyBC,GACrB3B,KAAK4B,gBACQ,UAATD,IACkB,aAAd3B,KAAKD,KACLC,KAAK6B,OAAS7B,KAAKW,SACE,eAAdX,KAAKD,OACZC,KAAK6B,OAAS7B,KAAKqB,UAG9B,EAGAS,OAAOC,eAAeC,IAAI,wBAC3BF,OAAOC,eAAeE,OAAO,sBAAuBxC"}