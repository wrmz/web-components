{"version":3,"file":"FormElement.js","sources":["../../../../../src/modules/form/common/FormElement.js"],"sourcesContent":["export class FormElement extends HTMLElement {\n    static get observedAttributes() {\n        return ['invalid', 'value'];\n    }\n\n    constructor() {\n        super();\n        this.input = null;\n        this.radios = null;\n        this.handleFormElementInvalid = this.handleFormElementInvalid.bind(this);\n        this.handleFormElementInput = this.handleFormElementInput.bind(this);\n    }\n\n    get valid() { return !this.hasAttribute('invalid') && !this.hasAttribute('aria-invalid'); }\n    set valid(v) {\n        if (v) {\n            this.removeAttribute('invalid');\n            this.removeAttribute('aria-invalid');\n        } else {\n            this.setAttribute('invalid', '');\n            this.setAttribute('aria-invalid', '');\n        }\n    }\n\n    registerElementForValidation(element) {\n        element.addEventListener('invalid', this.handleFormElementInvalid, false);\n        element.addEventListener('input', this.handleFormElementInput, false);\n    }\n\n    handleFormElementInvalid(e) {\n        this.valid = false;\n        this.toggleInvalidAttribute(e.target);\n    }\n\n    handleFormElementInput(e) {\n        const element = e.target;\n        this.valid = element.checkValidity();\n        this.toggleInvalidAttribute(element);\n    }\n\n    toggleInvalidAttribute(element) {\n        const errorMsg = this.shadowRoot.querySelector('info-message[role=\"alert\"]');\n        if (errorMsg) {\n            element.validity.valid ? errorMsg.removeAttribute('invalid') : errorMsg.setAttribute('invalid', '');\n        }\n\n    }\n\n    handleChanged() {\n        const errorMsg = this.shadowRoot.querySelector('info-message[role=\"alert\"]');\n        if (errorMsg) {\n            this.hasAttribute('invalid') ? errorMsg.setAttribute('invalid', '') : errorMsg.removeAttribute('invalid');\n        }\n    }\n\n    attributeChangedCallback() {\n        this.handleChanged();\n    }\n}\n"],"names":["FormElement","HTMLElement","observedAttributes","constructor","super","this","input","radios","handleFormElementInvalid","bind","handleFormElementInput","valid","hasAttribute","v","removeAttribute","setAttribute","registerElementForValidation","element","addEventListener","e","toggleInvalidAttribute","target","checkValidity","errorMsg","shadowRoot","querySelector","validity","handleChanged","attributeChangedCallback"],"mappings":"AAAO,MAAMA,oBAAoBC,YAClBC,gCACP,MAAO,CAAC,UAAW,SAGvBC,cACIC,QACAC,KAAKC,MAAQ,KACbD,KAAKE,OAAS,KACdF,KAAKG,yBAA2BH,KAAKG,yBAAyBC,KAAKJ,MACnEA,KAAKK,uBAAyBL,KAAKK,uBAAuBD,KAAKJ,MAG/DM,YAAU,OAAQN,KAAKO,aAAa,aAAeP,KAAKO,aAAa,gBACrED,UAAME,GACFA,GACAR,KAAKS,gBAAgB,WACrBT,KAAKS,gBAAgB,kBAErBT,KAAKU,aAAa,UAAW,IAC7BV,KAAKU,aAAa,eAAgB,KAI1CC,6BAA6BC,GACzBA,EAAQC,iBAAiB,UAAWb,KAAKG,0BAA0B,GACnES,EAAQC,iBAAiB,QAASb,KAAKK,wBAAwB,GAGnEF,yBAAyBW,GACrBd,KAAKM,OAAQ,EACbN,KAAKe,uBAAuBD,EAAEE,QAGlCX,uBAAuBS,GACnB,MAAMF,EAAUE,EAAEE,OAClBhB,KAAKM,MAAQM,EAAQK,gBACrBjB,KAAKe,uBAAuBH,GAGhCG,uBAAuBH,GACnB,MAAMM,EAAWlB,KAAKmB,WAAWC,cAAc,8BAC3CF,IACAN,EAAQS,SAASf,MAAQY,EAAST,gBAAgB,WAAaS,EAASR,aAAa,UAAW,KAKxGY,gBACI,MAAMJ,EAAWlB,KAAKmB,WAAWC,cAAc,8BAC3CF,IACAlB,KAAKO,aAAa,WAAaW,EAASR,aAAa,UAAW,IAAMQ,EAAST,gBAAgB,YAIvGc,2BACIvB,KAAKsB"}