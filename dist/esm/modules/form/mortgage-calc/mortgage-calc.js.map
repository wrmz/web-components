{"version":3,"file":"mortgage-calc.js","sources":["../../../../../src/modules/form/mortgage-calc/mortgage-calc.js"],"sourcesContent":["import { registerComponents } from '../../common/register-components.js';\nimport { MortgageCalcInput } from '../mortgage-calc-input/mortgage-calc-input.js';\nimport { RadioGroup } from '../radio-group/radio-group.js';\nimport { ChartDonut } from '../../chart/donut/chart-donut.js';\n\n/**\n * @injectHTML\n */\nexport class MortgageCalc extends HTMLElement {\n    static get observedAttributes() {\n        return [\n            'price',\n            'downpayment',\n            'interest',\n            'taxes',\n            'term',\n            'pmi',\n            'hoa',\n            'monthly-payment',\n            'colors',\n        ];\n    }\n\n    constructor() {\n        super();\n\n        registerComponents(MortgageCalcInput, RadioGroup, ChartDonut);\n\n        this.chartElement = undefined;\n\n        this.elements = {\n            price: this.shadowRoot.querySelector('mortgage-calc-input[name=\"price\"]'),\n            downpayment: this.shadowRoot.querySelector('mortgage-calc-input[name=\"downpayment\"]'),\n            interest: this.shadowRoot.querySelector('mortgage-calc-input[name=\"interest\"]'),\n            taxes: this.shadowRoot.querySelector('mortgage-calc-input[name=\"taxes\"]'),\n            term: this.shadowRoot.querySelector('radio-group[name=\"term\"]'),\n            hoa: this.shadowRoot.querySelector('mortgage-calc-input[name=\"hoa\"]'),\n        };\n\n        this.output = {\n            principal: this.shadowRoot.querySelector('#outputPrincipal'), // will include interest\n            taxes: this.shadowRoot.querySelector('#outputTaxes'),\n            fees: this.shadowRoot.querySelector('#outputFees'),\n            perMonth: this.shadowRoot.querySelector('#outputPerMonth'),\n        };\n\n        this.addEventListener('input', this.handleInput, false);\n    }\n\n    get colors() {\n        let colors = this.getAttribute('colors') || '';\n        colors = colors.replace(/'/g, '\"');\n        return colors ? JSON.parse(colors) : [];\n    }\n\n    get currencyFormat() {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        }).format;\n    }\n\n    get price() { return this.elements ? this.elements.price.numeric : 0; }\n    set price(v) { this.elements.price.value = v; }\n\n    get downpayment() { return this.elements ? this.elements.downpayment.numeric : 0; }\n    set downpayment(v) { this.elements.downpayment.value = v; }\n\n    get interest() { return this.elements ? this.elements.interest.numeric : 0; }\n    set interest(v) { this.elements.interest.value = v; }\n\n    get taxes() { return this.elements ? this.elements.taxes.numeric : 0; }\n    set taxes(v) { this.elements.taxes.value = v;}\n\n    get hoa() { return this.elements ? this.elements.hoa.numeric : 0; }\n    set hoa(v) { this.elements.hoa.value = v; }\n\n    get term() { return this.elements ? this.elements.term.numeric : 0; }\n    set term(v) { this.elements.term.value = v; }\n\n    get pmi() { return this.getAttribute('pmi') || ''; }\n\n    get insurance() { return this.getAttribute('insurance') || ''; }\n\n    /**\n     * The mortgage principal is the initial loan amount.\n     * It's the price minus the downpayment you make.\n     * If a home is $500,000 and you put down $100,000,\n     * you'll need to borrow $400,000 from the bank.\n     */\n    get mortgagePrincipal() { return this.price - this.downpayment; }\n\n    /**\n     * The interest rate percentage is divided by 12 (months in a year)\n     * to find the monthly interest rate.\n     * If the annual interest rate is 4%, the monthly interest rate is 0.33%\n     * or 0.0033.\n     */\n    get monthlyInterestRate() { return this.interest / 100 / 12; }\n\n\n    /**\n     * For a fixed-rate mortgage, the term is often 30 or 15 years.\n     * The number of payments is the number of years multiplied by\n     * 12 (months in a year). 30 years would be 360 monthly payments.\n     */\n    get numberOfPayments() { return this.term * 12; }\n\n\n    /**\n     * Monthly principal and interest is calculated against the loan principal\n     * and considers the monthly interest rate and total months in the loan term chosen\n     * @returns {Number}\n     */\n    get monthlyPrincipalAndInterest() {\n        const isCalculable = this.mortgagePrincipal && this.monthlyInterestRate;\n        return isCalculable\n            ? (this.mortgagePrincipal / ((1 - Math.pow(1 + this.monthlyInterestRate, -this.numberOfPayments)) / this.monthlyInterestRate))\n            : 0;\n    }\n\n\n    /**\n     * The monthly mortgage principal divided by the total number\n     * of payments\n     * @returns {Number}\n     */\n    get monthlyMortgagePrincipal() {\n        const monthlyMortgagePrincipal = this.monthlyPrincipalAndInterest - this.monthlyInterestCost;\n        return monthlyMortgagePrincipal;\n    }\n\n    /**\n     * The interest cost is the mortgage principal multiplied by the monthly interest rate\n     * @returns {Number}\n     */\n    get monthlyInterestCost() {\n        const interestCost = this.mortgagePrincipal * this.monthlyInterestRate;\n        return interestCost;\n    }\n\n    /**\n     * Private mortgage insurance (PMI) is required if you put\n     * down less than 20% of the purchase price with a conventional mortgage.\n     * It's typically between 0.2% and 2% of the mortgage principal.\n     */\n    get pmiCost() {\n        const lessThanTwentyPercent = (this.downpayment / this.price) < 0.2;\n        return lessThanTwentyPercent\n            ? ((this.pmi / 100) * this.mortgagePrincipal) / 12\n            : 0;\n    }\n\n    /**\n     * Property tax is a percentage of the price\n     * split into 12 month payments\n     */\n    get taxesCost() {\n        return ((this.taxes / 100) * this.price) / 12;\n    }\n\n    /**\n     * Home insurance is a percentage of the price\n     * split into 12 month payments\n     * @returns {Number}\n     */\n    get insuranceCost() {\n        const insuranceCost = ((this.insurance / 100) * this.price) / 12;\n        return insuranceCost;\n    }\n\n    get feesCost() {\n        const feesCost = this.hoa;\n        return feesCost;\n    }\n\n    /**\n     * Monthly payment adds all the monthly costs up into a single sum\n     * @returns {Number}\n     */\n    get monthlyPayment() {\n        const monthlyPayment = this.monthlyPrincipalAndInterest + this.taxesCost + this.insuranceCost + this.pmiCost + this.feesCost;\n        return monthlyPayment;\n    }\n\n    generateChart() {\n        const chartContainer = this.shadowRoot.querySelector('.mortgage-calc__chart');\n        this.chartElement = document.createElement('chart-donut');\n        this.chartElement.colors = this.colors;\n        this.chartElement.labels = ['Principal + Interest', 'Taxes', 'Fees'];\n        this.chartElement.values = [this.monthlyPrincipalAndInterest, this.taxesCost, this.feesCost];\n\n        chartContainer.append(this.chartElement);\n    }\n\n    /**\n     * Handles input events for the mortgage calc form\n     */\n    handleInput() {\n        this.output.principal.textContent = this.currencyFormat(this.monthlyPrincipalAndInterest);\n        this.output.taxes.textContent = this.currencyFormat(this.taxesCost);\n        this.output.fees.textContent = this.currencyFormat(this.feesCost);\n        this.output.perMonth.textContent = this.currencyFormat(this.monthlyPayment);\n        if (this.chartElement) {\n            this.chartElement.values = [this.monthlyPrincipalAndInterest, this.taxesCost, this.feesCost];\n        }\n    }\n\n    connectedCallback() {\n        this.generateChart();\n    }\n\n    /**\n     * Handles changes to the component attributes\n     * @param {String} attr - The attribute that changed\n     * @param {*} oldVal - The old value\n     * @param {*} newVal - The new value\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        // Update attributes\n        if (attr === 'price') {\n            this.price = newVal;\n        } else if (attr === 'downpayment') {\n            this.downpayment = newVal;\n        } else if (attr === 'interest') {\n            this.interest = newVal;\n        } else if (attr === 'taxes') {\n            this.taxes = newVal;\n        } else if (attr === 'term') {\n            this.term = newVal;\n        } else if (attr === 'hoa') {\n            this.hoa = newVal;\n        }\n\n        // Update the outputs\n        this.output.principal.textContent = this.currencyFormat(this.monthlyMortgagePrincipal + this.monthlyInterestCost);\n        this.output.taxes.textContent = this.currencyFormat(this.taxesCost);\n        this.output.fees.textContent = this.currencyFormat(this.feesCost);\n        this.output.perMonth.textContent = this.currencyFormat(this.monthlyPayment);\n        if (this.chartElement) {\n            this.chartElement.values = [this.monthlyPrincipalAndInterest, this.taxesCost, this.feesCost];\n        }\n    }\n}\n\n// Define the component\nif (!window.customElements.get('mortgage-calc')) {\n    window.customElements.define('mortgage-calc', MortgageCalc);\n}\n"],"names":["MortgageCalc","HTMLElement","observedAttributes","constructor","super","this","attachShadow","mode","innerHTML","registerComponents","MortgageCalcInput","RadioGroup","ChartDonut","chartElement","undefined","elements","price","shadowRoot","querySelector","downpayment","interest","taxes","term","hoa","output","principal","fees","perMonth","addEventListener","handleInput","colors","getAttribute","replace","JSON","parse","currencyFormat","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","numeric","v","value","pmi","insurance","mortgagePrincipal","monthlyInterestRate","numberOfPayments","monthlyPrincipalAndInterest","Math","pow","monthlyMortgagePrincipal","monthlyInterestCost","pmiCost","taxesCost","insuranceCost","feesCost","monthlyPayment","generateChart","chartContainer","document","createElement","labels","values","append","textContent","connectedCallback","attributeChangedCallback","attr","oldVal","newVal","window","customElements","get","define"],"mappings":"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"}