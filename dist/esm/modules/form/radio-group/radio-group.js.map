{"version":3,"file":"radio-group.js","sources":["../../../../../src/modules/form/radio-group/radio-group.js"],"sourcesContent":["import { registerComponents } from '../../common/register-components.js';\nimport { FormElement } from '../common/FormElement.js';\nimport { InfoMessage } from '../info-message/info-message.js';\n\n/**\n * @injectHTML\n */\nexport class RadioGroup extends FormElement {\n    static sanitize(v) { return (v + '').trim().replace(/[^0-9.]*/g, ''); }\n\n    constructor() {\n        super();\n        registerComponents(InfoMessage);\n        this.radios = null;\n        this.handleSlotChange = this.handleSlotChange.bind(this);\n        this.shadowRadios = this.shadowRoot.querySelector('.radio-group__options slot');\n        this.shadowRadios.addEventListener('slotchange', this.handleSlotChange, false);\n    }\n\n    get value() { return this.getAttribute('value') || ''; }\n    set value(v) { this.setAttribute('value', v); }\n\n    get numeric() {\n        const sanitized = RadioGroup.sanitize(this.value);\n        return isNaN(sanitized) ? 0 : sanitized;\n    }\n\n    get selectedRadio() {\n        return this.radios && this.value\n            ? this.radios.find(el => el.checked)\n            : null;\n    }\n    set selectedRadio(v) {\n        if (v && this.radios) {\n            const radio = this.radios.find(el => el.value === v);\n            if (radio) {\n                radio.checked = true;\n            }\n        }\n    }\n\n    handleSlotChange(e) {\n        this.radios = [...e.target.assignedElements()]\n            .flatMap(el => ([el, ...el.children]))\n            .filter(el => el.tagName === 'INPUT');\n\n        if (this.value) {\n            this.selectedRadio = this.value;\n        }\n\n        this.addEventListener('input', this.handleInput, false);\n    }\n\n    handleInput(e) {\n        this.value = e.target.value;\n    }\n\n    attributeChangedCallback(attr, oldVal, newVal) {\n        this.handleChanged();\n        if (attr === 'value') {\n            this._value = newVal;\n        }\n    }\n\n    detachedCallback() {\n        this.removeEventListener('input', this.handleInput);\n    }\n}\n\nif (!window.customElements.get('radio-group')) {\n    window.customElements.define('radio-group', RadioGroup);\n}\n"],"names":["RadioGroup","FormElement","static","v","trim","replace","constructor","super","this","attachShadow","mode","innerHTML","registerComponents","InfoMessage","radios","handleSlotChange","bind","shadowRadios","shadowRoot","querySelector","addEventListener","value","getAttribute","setAttribute","numeric","sanitized","sanitize","isNaN","selectedRadio","find","el","checked","radio","e","target","assignedElements","flatMap","children","filter","tagName","handleInput","attributeChangedCallback","attr","oldVal","newVal","handleChanged","_value","detachedCallback","removeEventListener","window","customElements","get","define"],"mappings":"8LAOO,MAAMA,mBAAmBC,EAC5BC,gBAAgBC,GAAK,OAAQA,EAAI,IAAIC,OAAOC,QAAQ,YAAa,GAAM,CAEvEC,cACIC,QAAQC,KAAKC,aAAa,CAACC,KAAK,SAASC,UAAU,khBACnDC,EAAmBC,GACnBL,KAAKM,OAAS,KACdN,KAAKO,iBAAmBP,KAAKO,iBAAiBC,KAAKR,MACnDA,KAAKS,aAAeT,KAAKU,WAAWC,cAAc,8BAClDX,KAAKS,aAAaG,iBAAiB,aAAcZ,KAAKO,kBAAkB,EAC3E,CAEGM,YAAU,OAAOb,KAAKc,aAAa,UAAY,EAAK,CACpDD,UAAMlB,GAAKK,KAAKe,aAAa,QAASpB,EAAK,CAE3CqB,cACA,MAAMC,EAAYzB,WAAW0B,SAASlB,KAAKa,OAC3C,OAAOM,MAAMF,GAAa,EAAIA,CACjC,CAEGG,oBACA,OAAOpB,KAAKM,QAAUN,KAAKa,MACrBb,KAAKM,OAAOe,MAAKC,GAAMA,EAAGC,UAC1B,IACT,CACGH,kBAAczB,GACd,GAAIA,GAAKK,KAAKM,OAAQ,CAClB,MAAMkB,EAAQxB,KAAKM,OAAOe,MAAKC,GAAMA,EAAGT,QAAUlB,IAC9C6B,IACAA,EAAMD,SAAU,EAEvB,CACJ,CAEDhB,iBAAiBkB,GACbzB,KAAKM,OAAS,IAAImB,EAAEC,OAAOC,oBACtBC,SAAQN,GAAE,CAAMA,KAAOA,EAAGO,YAC1BC,QAAOR,GAAqB,UAAfA,EAAGS,UAEjB/B,KAAKa,QACLb,KAAKoB,cAAgBpB,KAAKa,OAG9Bb,KAAKY,iBAAiB,QAASZ,KAAKgC,aAAa,EACpD,CAEDA,YAAYP,GACRzB,KAAKa,MAAQY,EAAEC,OAAOb,KACzB,CAEDoB,yBAAyBC,EAAMC,EAAQC,GACnCpC,KAAKqC,gBACQ,UAATH,IACAlC,KAAKsC,OAASF,EAErB,CAEDG,mBACIvC,KAAKwC,oBAAoB,QAASxC,KAAKgC,YAC1C,EAGAS,OAAOC,eAAeC,IAAI,gBAC3BF,OAAOC,eAAeE,OAAO,cAAepD"}